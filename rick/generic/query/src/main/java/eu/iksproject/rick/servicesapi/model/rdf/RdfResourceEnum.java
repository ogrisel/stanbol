package eu.iksproject.rick.servicesapi.model.rdf;

public enum RdfResourceEnum {
    /**
     * The representation concept
     */
    Representation,
    /**
     * The field used to store the type of the representation
     */
    representationType,
    /**
     * The Entity concept
     */
    Entity,
    /**
     * The Symbol concept
     */
    Symbol,
    /**
     * The label of a Symbol
     */
    label,
    /**
     * The description of a Symbol
     */
    description,
    /**
     * Predecessors of a Symbol
     */
    predecessor,
    /**
     * Successors of a Symbol
     */
    successor,
    /**
     * The property used for the state of the symbol
     */
    hasSymbolState,
    /**
     * The Concept used to type instances of SymbolStates
     */
    SymbolState,
    /**
     * The Individual representing the active state of a Symbol
     */
    symbolStateActive(null,"symbolState-active"),
    /**
     * The Individual representing the depreciated state of a Symbol
     */
    symbolStateDepreciated(null,"symbolState-depreciated"),
    /**
     * The Individual representing the proposed state of a Symbol
     */
    symbolStateProposed(null,"symbolState-proposed"),
    /**
     * The Individual representing the removed state of a Symbol
     */
    symbolStateRemoved(null,"symbolState-removed"),
    /**
     * Property used to reference MappedEntites mapped to a Symbol
     */
    hasMapping,
    /**
     * A EntityMapping that links an Entity to a Symbol
     */
    EntityMapping,
    /**
     * Property used to reference the mapped entity.
     */
    mappedEntity,
    /**
     * Property used to reference the mapped symbol
     */
    mappedSymbol,
    /**
     * The property used for the state of the MappedEntity
     */
    hasMappingState,
    /**
     * The expires date of a representation
     */
    expires,
    /**
     * The Concept used to type instances of mapping states
     */
    MappingState,
    /**
     * The Individual representing the confirmed state of MappedEntities
     */
    mappingStateConfirmed(null,"mappingState-confirmed"),
    /**
     * The Individual representing the expired state of MappedEntities
     */
    mappingStateExpired(null,"mappingState-expired"),
    /**
     * The Individual representing the proposed state of MappedEntities
     */
    mappingStateProposed(null,"mappingState-proposed"),
    /**
     * The Individual representing the rejected state of MappedEntities
     */
    mappingStateRejected(null,"mappingState-rejected"),
    ;
    String uri;
    /**
     * Initialise a new property by using the parse URI. If <code>null</code> is
     * parsed, the URI is generated by using the rick namespace (
     * {@link NamespaceEnum#rick}).
     * @param uri the uri of the element
     */
    private RdfResourceEnum(String uri) {
        if(uri == null){
            this.uri = NamespaceEnum.rick+name();
        }
        this.uri = uri;
    }
    /**
     * Initialise a new property with the namespace and the {@link #name()} as
     * local name.
     * @param ns the namespace of the property or <code>null</code> to use the
     * default namespace
     */
    private RdfResourceEnum(NamespaceEnum ns){
        this(ns,null);
    }
    /**
     * Initialise a new property with the parsed namespace and local name.
     * @param ns the namespace of the property or <code>null</code> to use the
     * default namespace
     * @param localName the local name of the property or <code>null</code> to
     * use the {@link #name()} as local name.
     */
    private RdfResourceEnum(NamespaceEnum ns,String localName){
        String uri;
        if(ns == null){
            uri = NamespaceEnum.rick.getNamespace();
        } else {
            uri = ns.getNamespace();
        }
        if(localName == null){
            uri = uri+name();
        } else {
            uri = uri+localName;
        }
        this.uri = uri;
    }
    /**
     * Initialise a new property with {@link NamespaceEnum#rick}) as namespace
     * and the {@link #name()} as local name.
     */
    private RdfResourceEnum(){
        this(null,null);
    }
    /**
     * Getter for the Unicode character of the URI
     * @return
     */
    public String getUri(){
        return uri;
    }
    @Override
    public String toString() {
        return uri.toString();
    }

}
